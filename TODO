Note:

- vortex_greetings_send: docs are the copyright!

- vortex_channel_send_rpy(): ... actually, it appears const isn't used
  anywhere, why not?

- profiles_register(): uri is strduped, contrary to docs, so it could be
  const gchar* (also, uri doesn't appear to be freed)

  profiles are never unregistered? I have no way to know when to free the
  user-data, currently I just leak it, though since only one call to
  vortex_init is allowed, its not a recurring leak.

- is calling vortex_exit() in a callback the right way to stop  the
  listener? When I do it in the channel close callback, the client never
  seems to get clean shutdown.

- does BEEP allow discovery of a peer that has died? the simple client
  and server never timeout when the other side crashes.

- shouldn't the connection accept callback be associated with a profile,
  instead of global?

- vortex_color_log_enable: where does the log go?

- VortexOnStartChannelExtended: no way to set the encoding for profile_content_reply?
  Also, profile_content_reply is freed with g_free (undocumented but
  semi-obvious), can it have been allocated with strdup()?

++

Object lifetime:

listener:
start:vortex_listener_new

connection:

- vortex_connection_new/ (active)
    VortexConnectionNew
- vortex_listener_set_on_connection_accepted/ (passive)
    VortexOnAcceptedConnection
- vortex_connection_set_on_close_full/
    VortexConnectionOnCloseFull

vortex_connection_ref, for what purpose?


channel:

- vortex_profiles_register/ (passive)
    VortexOnStartChannel (don't use)
    VortexOnCloseChannel (allows peer to refuse close)

- vortex_profiles_register_extended_start/
    VortexOnStartChannelExtended

- vortex_channel_new_full/ (active)
    VortexOnCloseChannel
    VortexOnFrameReceived
    VortexOnChannelCreated

- vortex_channel_close/ (active)
    VortexOnClosedNotification

frame:



++

What is focus?

GUI?

Qt demo of Vortex? Qt understanding of Tcp?

lua chat server?

Maybe best to work towards a goal --> What does a chat application need?

- not like IM, make it like IRC, so everything goes to everybody

Get single-channel working, but where you choose the server, save the server
prefs, save whether it should auto-connect, save window settings, save chat history.


--> demos Qt ability

- Strip the tcp echo out.

Next, get single-channel working with lua threaded server.


++

x qchat client of 'echo' service

- cchatd server of beep chat service
    ... this is the vortex echo-server, except instead of sending data in
    reply, it should send it with MSG, and wait for RPY.

- chat (cmdline) client of beep chat service
    ... should reimplement in a non-blocking way. I'll need this
    to play with the client

- qchat client of beep chat service

- lchatd (lua chat server) with beep

- lechod (lua echo server) with luasocket

- Bonjour support

- Add the main gui elements - title bar, open, close, save settings, etc.

