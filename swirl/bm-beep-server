#!/usr/bin/env lua

-- TODO factor common out of client+server

NULL = "http://example.com/beep/null"

require"argp"
require"swirlsock"

-- Arguments

USAGE = "usage: "..arg[0].." port=INT [verbose=yes|very]"

argp.expand(arg)

arg.port = assert(tonumber(arg.port), "no port\n"..USAGE)

verbose = arg.verbose

if verbose then
  trace = print
else
  trace = function () end
end

-- Null server

null = {
  profile = {NULL},
  msgsz = 0 -- TODO need msgsz / channel / core for multi-channel support
}

function null.on_start(ch0)
  trace(".. on_start")
  ch0:accept(NULL)
end

function null.on_msg(frame)
  if verbose then
    trace(".. on_msg", tostring(frame))
  end
  null.msgsz = null.msgsz + #frame:payload()

  if not frame:more() then
    frame:session():send_rpy(frame:channelno(), frame:messageno(), tostring(null.msgsz))
    null.msgsz = 0
  end

  frame:destroy()

  -- useful when debugging to slow down the server
  if arg.delay then
    io.popen("sleep "..arg.delay):read"*a"
  end
end

if verbose then
  -- print send/receive, and data if very verbose
  function null.trace_receive(core, data)
    trace("--- I > L:"..#data)

    if verbose == "very" then
      trace(data.."\n---")
    end
  end

  function null.trace_send(core, data, sz)
    trace("--- L > I:"..sz.."/"..#data)
    if verbose == "very" then
      trace(data.."\n---")
    end
  end
end

-- Start loop

assert(swirl.listen(null, arg.port))

sockext.loop.start()

