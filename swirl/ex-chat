#!/usr/bin/env lua

require"quote"
require"swirlsock"


-- Setup

q = quote.quote

CHAT = "http://example.com/beep/chat"

USAGE = "usage: "..arg[0].." <port> [host]"

port = assert(tonumber(arg[1]), "no port\n"..USAGE)
host = arg[2]
verbose = false

local print = print

if not verbose then
  print = function () end
end

io.stdout:setvbuf"no"

local file
local core
local chno

-- When a file is selected as readable, read a whole line (I know there isn't
-- guaranteed to be a full line, but this is a swirl example, not a console-IO-
-- with-lua example).
--
-- Reading doesn't start until the channel has started.

file = sockext.selectable(0)

function read(file)
  local line = io.read"*l"

  print(".. read", q(line))

  if not line then
    -- end of chat, request to close BEEP session by closing channel zero
    core:close(0)
    swirl.loop.receive(file)
  else
    core:send_msg(chno, line)
  end
end


local chat = {}

function chat.on_connected(_core)
  print(".. connected")
  core = _core
  chno = assert(core:start(CHAT, os.getenv"USER" or "anonymous"))
end

function chat.on_disconnected(core, emsg)
  -- This is always unexpected, we don't get disconnected unless we asked, in
  -- which case we would have exited in the on_closed()
  io.stderr:write("unexpected error on socket - "..emsg.."\n")
  os.exit(1)
end

function chat.on_started(core, chno)
  print(".. started", chno)

  -- ready to start reading from the file, now
  swirl.loop.receive(file, read)
end

function chat.on_start_err(core, chno, ecode, emsg, elang)
  error(string.format("error %d, %s", ecode, emsg or swirl.ecodes[ecode] or "unknown"))
  os.exit(1)
end

function chat.on_closed()
  print(".. closed")
  os.exit(0)
end

function chat.on_close_error(core, chno, ecode, emsg)
  print(".. close failed")
  os.exit(0)
end

function chat.on_msg(frame)
  print(".. on_msg", frame, q(frame:payload()))
  local out = frame:payload()

  -- format with leading "|" so it looks quoted
  out = out:gsub("\r", "")
  out = out:gsub("\n", "\n| ")
  io.stdout:write("| ", out, "\n")
  if not frame:more() then
    frame:core():send_rpy(frame:channelno(), frame:messageno(), "")
  end
end


assert(swirl.connect(chat, port, host))

swirl.loop.start()

