#!/usr/bin/env lua

NULL = "http://example.com/beep/null"

require"argp"
require"swirlsock"

-- Arguments

USAGE = "usage: "..arg[0].." port=INT [host=STR] [time=INT] [size=INT] [presend=INT]"

arg.host     = "localhost"
arg.time     = 5
arg.size     = 5000
arg.presend  = 2

argp.expand(arg)

arg.port = assert(tonumber(arg.port), "no port\n"..USAGE)

verbose = arg.verbose

if arg.verbose then
  trace = print
else
  trace = function () end
end

arg.port = assert(tonumber(arg.port), "no port\n"..USAGE)

BUF = string.rep("x", arg.size)

local xfersz = 0

-- Null client

null = {}

function null.on_connected(core)
  trace(".. on_connected")
  null.core = core
  null.chno = core:start(NULL)
end

function null.on_started(ch0)
  trace(".. on_started")
  t0 = os.time()

  -- keep outgoing queue full
  for _=1,arg.presend do
    assert(null.core:send_msg(null.chno, BUF))
  end
end

function null.on_rpy(frame)
  trace(".. on_rpy", frame:messageno(), frame:payload())

  xfersz = xfersz + assert(tonumber(frame:payload()))

  trace(".. xfersz = "..xfersz)

  t1 = os.time()

  if t1 - t0 > arg.time then
    t = t1 - t0
    print("xsz", xfersz, "t", t, "rate", xfersz/1000/t, "kb/s")
    os.exit(0)
  end

  assert(frame:session():send_msg(frame:channelno(), BUF))

  frame:destroy()
end

-- Start loop

assert(swirl.connect(null, arg.port, arg.host))

sockext.loop.start()

