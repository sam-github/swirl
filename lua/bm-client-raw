#!/usr/bin/env lua
-- Benchmark raw throughput, similarly to to bm-client, but without BEEP.

require"argp"
require"quote"
require"sockext"

q = quote.quote

-- Arguments

USAGE = "usage: "..arg[0].." port=INT [host=STR] [time=INT] [size=INT]"

arg.host     = "localhost"
arg.time     = 5
arg.size     = 5000

argp.expand(arg)

arg.port = assert(tonumber(arg.port), "no port\n"..USAGE)
arg.time = assert(tonumber(arg.time))

print("options: "..quote.quote(arg))

verbose = arg.verbose

if arg.verbose then
  trace = print
else
  trace = function () end
end

BUF = string.rep("x", arg.size)

-- Benchmark raw TCP throughput

local xfersz = 0

function receive(client)
  trace(".. receive")

  local data, emsg = client:receive"*l"

  assert(data, emsg)

  xfersz = xfersz + assert(tonumber(data))

  trace("   xfersz = "..xfersz)

  local t1 = os.time()

  if t1 - t0 > arg.time then
    local t = t1 - t0
    print("tcp", "b", xfersz, "t", t, "rate", xfersz/1000/t, "kb/s")
    os.exit(0)
  end
end

function send(client)
  trace(".. send")
  local sz, emsg = sockext.write(client, BUF)
  if not sz and emsg ~= "timeout" then
    assert(sz, emsg)
  end
end

trace("connecting...")

client = assert(socket.connect(arg.host, arg.port))
assert(client:settimeout(0))
assert(client:setoption("tcp-nodelay", true))

trace("starting...")

t0 = os.time()

loop = sockext.loop

if verbose == "very" then
  loop._debug = true
end

loop.receive(client, receive)
loop.send(client, send)
loop.start()

