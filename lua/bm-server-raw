#!/usr/bin/env lua

require"argp"
require"quote"
require"sockext"

loop = sockext.loop

q = quote.quote

-- Setup

USAGE = "usage: "..arg[0].." port=INT [verbose=yes|very]"

argp.expand(arg)

arg.port = assert(tonumber(arg.port), "no port\n"..USAGE)

print("options: "..quote.quote(arg))

verbose = arg.verbose

if verbose then
  trace = print
else
  trace = function () end
end

-- Raw server:

raw = {}

raw.server = assert(socket.bind("*", arg.port))
assert(raw.server:settimeout(0))

function raw.receive(client)
  trace".. receive"

  local data, emsg = sockext.read(client, 2 * 4096)

  if data then
    if verbose then
      print("--- I > L:"..#data)
    end
    local ok, emsg = client:send(#data.."\n")
    if not ok then
      print("send on", client, "failed", emsg)
      loop.receive(client)
    end
  elseif emsg == "timeout" then
    print("timedout on read-ready socket?")
  else
    print("receive on", client, "failed", emsg)
    loop.receive(client)
  end
end

function raw.accept(server)
  print(".. accept from", q(server))
  client = server:accept()
  if not client then
    print"oops, client gone before we accepted"
  else
    assert(client:settimeout(0))
    assert(client:setoption("tcp-nodelay", true))
    loop.receive(client, raw.receive)
  end
end

loop.receive(raw.server, raw.accept)

-- Start loop

loop.start()

